// ==================== Enums ====================
enum RoomStatus {
  OPEN
  CLOSED
}

enum Role {
  USER
  ADMIN
}

enum VoteValue {
  ACCEPT
  REJECT
}

enum ImageSource {
  google
  wongnai
  ugc
}

enum AssetStatus {
  pending
  approved
  rejected
}

enum RatingStatus {
  pending
  approved
  rejected
}

// ================= Generator/Datasource =================
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ==================== Core Models ======================
model Restaurant {
  id               String        @id @default(cuid())
  placeId          String        @unique
  name             String
  address          String
  lat              Float
  lng              Float
  rating           Float?
  priceLevel       Int?
  userRatingsTotal Int?
  source           String        @default("google")
  fetchedAt        DateTime      @default(now())

  // Relations
  images               RestaurantImage[]
  assets               ImageAsset[]
  votes                Vote[]
  ratings              Rating[]              // üëà back-relations (ratings)

  // back-relations
  mealHistories        MealHistory[]
  suggestionHistories  RoomSuggestionHistory[]

  @@index([lat, lng])
}

model User {
  id                String            @id @default(cuid())
  createdAt         DateTime          @default(now())
  username          String            @unique
  password          String
  role              Role              @default(USER)

  // Relations
  rooms             Room[]            @relation("HostRooms")
  roomParticipants  RoomParticipant[]
  votes             Vote[]
  assets            ImageAsset[]
  sessions          Session[]
  ratings           Rating[]          // üëà ratings ‡∏ó‡∏µ‡πà‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏™‡∏£‡πâ‡∏≤‡∏á

  // back-relations
  mealHistories     MealHistory[]

  // back-relation for ShortLink that user create
  shortLinks        ShortLink[]       @relation("UserShortLinks")
}

model Room {
  id           String           @id @default(cuid())
  code         String           @unique @db.VarChar(8)
  hostId       String
  status       RoomStatus       @default(OPEN)
  expiresAt    DateTime?
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt

  // Relations
  host                 User                 @relation("HostRooms", fields: [hostId], references: [id])
  participants         RoomParticipant[]
  votes                Vote[]
  assets               ImageAsset[]
  ratings              Rating[]            // üëà ratings ‡∏ú‡∏π‡∏Å‡∏Å‡∏±‡∏ö‡∏´‡πâ‡∏≠‡∏á (optional)

  // back-relations
  mealHistories        MealHistory[]
  suggestionHistories  RoomSuggestionHistory[]

  // back-relation for ShortLink of this room
  shortLinks           ShortLink[]          @relation("RoomShortLinks")

  @@index([code])
}

model RoomParticipant {
  id          String    @id @default(cuid())
  roomId      String
  userId      String?
  displayName String
  role        String    @default("member")
  joinedAt    DateTime  @default(now())

  room        Room      @relation(fields: [roomId], references: [id])
  user        User?     @relation(fields: [userId], references: [id])

  @@unique([roomId, userId])
  @@index([roomId])
}

model Vote {
  id            String      @id @default(cuid())
  roomId        String
  userId        String
  restaurantId  String
  value         VoteValue
  createdAt     DateTime    @default(now())

  user          User        @relation(fields: [userId], references: [id])
  room          Room        @relation(fields: [roomId], references: [id])
  restaurant    Restaurant  @relation(fields: [restaurantId], references: [id])

  @@unique([roomId, userId, restaurantId])
  @@index([roomId])
  @@index([userId])
  @@index([restaurantId])
}

// ================ Images (External & UGC) ==============
model RestaurantImage {
  id            String       @id @default(cuid())
  restaurantId  String
  source        ImageSource
  externalRef   String?
  externalUrl   String?
  width         Int?
  height        Int?
  attribution   String?
  isPrimary     Boolean      @default(false)
  fetchedAt     DateTime     @default(now())
  expiresAt     DateTime?

  restaurant    Restaurant   @relation(fields: [restaurantId], references: [id])

  @@index([restaurantId])
  @@index([source])
}

model ImageAsset {
  id            String       @id @default(cuid())
  source        ImageSource  @default(ugc)
  storageKey    String
  publicUrl     String
  contentType   String?
  sizeBytes     Int?
  width         Int?
  height        Int?
  blurHash      String?
  status        AssetStatus  @default(pending)

  // Optional links
  restaurantId  String?
  userId        String?
  roomId        String?

  restaurant    Restaurant?  @relation(fields: [restaurantId], references: [id])
  user          User?        @relation(fields: [userId], references: [id])
  room          Room?        @relation(fields: [roomId], references: [id])

  createdAt     DateTime     @default(now())
  moderatedAt   DateTime?
  flaggedCount  Int?         @default(0)

  @@index([restaurantId])
  @@index([userId])
  @@index([roomId])
  @@index([status])
}

// ===================== Session =========================
model Session {
  id         String   @id @default(cuid())
  userId     String
  tokenHash  String   @unique
  createdAt  DateTime @default(now())
  expiresAt  DateTime
  userAgent  String?
  ip         String?

  user       User     @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([expiresAt])
}

// ============== Decision / Suggestion History ===========
model MealHistory {
  id            String      @id @default(cuid())
  userId        String
  roomId        String
  restaurantId  String
  decidedAt     DateTime    @default(now())

  user          User        @relation(fields: [userId], references: [id])
  room          Room        @relation(fields: [roomId], references: [id])
  restaurant    Restaurant  @relation(fields: [restaurantId], references: [id])

  @@index([userId, decidedAt])
  @@index([roomId, decidedAt])
}

model RoomSuggestionHistory {
  id            String      @id @default(cuid())
  roomId        String
  restaurantId  String
  suggestedAt   DateTime    @default(now())

  room          Room        @relation(fields: [roomId], references: [id])
  restaurant    Restaurant  @relation(fields: [restaurantId], references: [id])

  @@index([roomId, suggestedAt])
  @@index([restaurantId])
}

// ===================== Short Link =======================
model ShortLink {
  code       String   @id
  targetUrl  String
  roomId     String?
  createdBy  String?
  expireAt   DateTime?
  createdAt  DateTime @default(now())

  // Relations
  room       Room?   @relation("RoomShortLinks", fields: [roomId], references: [id])
  user       User?   @relation("UserShortLinks", fields: [createdBy], references: [id])

  @@index([roomId])
  @@index([expireAt])
}

// ===================== Ratings =========================
model Rating {
  id           String        @id @default(cuid())
  roomId       String?
  userId       String?
  restaurantId String
  score        Int
  tags         Json?
  comment      String?
  status       RatingStatus  @default(pending)
  createdAt    DateTime      @default(now())

  room         Room?         @relation(fields: [roomId], references: [id])
  user         User?         @relation(fields: [userId], references: [id])
  restaurant   Restaurant    @relation(fields: [restaurantId], references: [id])
  photos       RatingPhoto[]

  @@index([restaurantId, status, createdAt])
  @@index([userId, createdAt])
}

model RatingPhoto {
  id         String   @id @default(cuid())
  ratingId   String
  storageKey String
  publicUrl  String?
  width      Int?
  height     Int?
  mime       String
  sizeBytes  Int
  createdAt  DateTime @default(now())

  rating     Rating   @relation(fields: [ratingId], references: [id])

  @@index([ratingId])
}
