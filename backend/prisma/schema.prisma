// ==================== Enums ====================
enum RoomStatus {
  OPEN
  CLOSED
}

enum Role {
  USER
  ADMIN
}

enum VoteValue {
  ACCEPT
  REJECT
}

enum ImageSource {
  google
  wongnai
  ugc
}

enum AssetStatus {
  pending
  approved
  rejected
}

// ================= Generator/Datasource =================
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ==================== Core Models ======================
model Restaurant {
  id               String        @id @default(cuid())
  placeId          String        @unique
  name             String
  address          String
  lat              Float
  lng              Float
  rating           Float?
  priceLevel       Int?
  userRatingsTotal Int?
  source           String        @default("google")
  fetchedAt        DateTime      @default(now())

  // Relations
  images               RestaurantImage[]
  assets               ImageAsset[]
  votes                Vote[]
  // üëá back-relations (‡πÅ‡∏Å‡πâ error)
  mealHistories        MealHistory[]
  suggestionHistories  RoomSuggestionHistory[]

  @@index([lat, lng])
}

model User {
  id                String            @id @default(cuid())
  createdAt         DateTime          @default(now())
  username          String            @unique
  password          String
  role              Role              @default(USER)

  // Relations
  rooms             Room[]            @relation("HostRooms")
  roomParticipants  RoomParticipant[]
  votes             Vote[]
  assets            ImageAsset[]
  sessions          Session[]
  // üëá back-relation (‡πÅ‡∏Å‡πâ error)
  mealHistories     MealHistory[]
}

model Room {
  id           String           @id @default(cuid())
  code         String           @unique @db.VarChar(8)
  hostId       String
  status       RoomStatus       @default(OPEN)
  expiresAt    DateTime?
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt

  // Relations
  host                 User                 @relation("HostRooms", fields: [hostId], references: [id])
  participants         RoomParticipant[]
  votes                Vote[]
  assets               ImageAsset[]
  // üëá back-relations (‡πÅ‡∏Å‡πâ error)
  mealHistories        MealHistory[]
  suggestionHistories  RoomSuggestionHistory[]

  @@index([code])
}

model RoomParticipant {
  id          String    @id @default(cuid())
  roomId      String
  userId      String?
  displayName String
  role        String    @default("member")
  joinedAt    DateTime  @default(now())

  room        Room      @relation(fields: [roomId], references: [id])
  user        User?     @relation(fields: [userId], references: [id])

  @@unique([roomId, userId]) // ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏´‡∏ô‡∏∂‡πà‡∏á‡∏Ñ‡∏ô‡πÄ‡∏Ç‡πâ‡∏≤‡∏´‡πâ‡∏≠‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô‡πÑ‡∏î‡πâ‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß (nullable userId ‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡∏ã‡πâ‡∏≥)
  @@index([roomId])
}

model Vote {
  id            String      @id @default(cuid())
  roomId        String
  userId        String
  restaurantId  String
  value         VoteValue
  createdAt     DateTime    @default(now())

  user          User        @relation(fields: [userId], references: [id])
  room          Room        @relation(fields: [roomId], references: [id])
  restaurant    Restaurant  @relation(fields: [restaurantId], references: [id])

  @@unique([roomId, userId, restaurantId]) // 1 ‡∏Ñ‡∏ô/1 ‡∏£‡πâ‡∏≤‡∏ô/1 ‡∏´‡πâ‡∏≠‡∏á ‡πÇ‡∏´‡∏ß‡∏ï‡πÄ‡∏î‡∏µ‡∏¢‡∏ß
  @@index([roomId])
  @@index([userId])
  @@index([restaurantId])
}

// ================ Images (External & UGC) ==============
model RestaurantImage {
  id            String       @id @default(cuid())
  restaurantId  String
  source        ImageSource
  externalRef   String?      // ‡πÄ‡∏ä‡πà‡∏ô Google photo_reference
  externalUrl   String?
  width         Int?
  height        Int?
  attribution   String?
  isPrimary     Boolean      @default(false)
  fetchedAt     DateTime     @default(now())
  expiresAt     DateTime?

  restaurant    Restaurant   @relation(fields: [restaurantId], references: [id])

  @@index([restaurantId])
  @@index([source])
}

model ImageAsset {
  id            String       @id @default(cuid())
  source        ImageSource  @default(ugc)
  storageKey    String       // path/key ‡πÉ‡∏ô Object Storage
  publicUrl     String       // CDN URL
  contentType   String?
  sizeBytes     Int?
  width         Int?
  height        Int?
  blurHash      String?
  status        AssetStatus  @default(pending)

  // Optional links
  restaurantId  String?
  userId        String?
  roomId        String?

  restaurant    Restaurant?  @relation(fields: [restaurantId], references: [id])
  user          User?        @relation(fields: [userId], references: [id])
  room          Room?        @relation(fields: [roomId], references: [id])

  createdAt     DateTime     @default(now())
  moderatedAt   DateTime?
  flaggedCount  Int?         @default(0)

  @@index([restaurantId])
  @@index([userId])
  @@index([roomId])
  @@index([status])
}

// ===================== Session =========================
model Session {
  id         String   @id @default(cuid())
  userId     String
  tokenHash  String   @unique
  createdAt  DateTime @default(now())
  expiresAt  DateTime
  userAgent  String?
  ip         String?

  user       User     @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([expiresAt])
}

// ============== Decision / Suggestion History ===========
model MealHistory {
  id            String      @id @default(cuid())
  userId        String
  roomId        String
  restaurantId  String
  decidedAt     DateTime    @default(now())

  user          User        @relation(fields: [userId], references: [id])
  room          Room        @relation(fields: [roomId], references: [id])
  restaurant    Restaurant  @relation(fields: [restaurantId], references: [id])

  @@index([userId, decidedAt])
  @@index([roomId, decidedAt])
}

model RoomSuggestionHistory {
  id            String      @id @default(cuid())
  roomId        String
  restaurantId  String
  suggestedAt   DateTime    @default(now())

  room          Room        @relation(fields: [roomId], references: [id])
  restaurant    Restaurant  @relation(fields: [restaurantId], references: [id])

  @@index([roomId, suggestedAt])
  @@index([restaurantId])
}
