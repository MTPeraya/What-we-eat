// backend/src/app/api/rooms/[roomId]/decide/score/route.ts
import { NextRequest, NextResponse } from 'next/server';
import { prisma } from '@/lib/db';                 // ‡∏õ‡∏£‡∏±‡∏ö path ‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏á‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Å‡∏ï‡πå‡∏Ñ‡∏∏‡∏ì
import { tallyVotesByRoom } from '@/services/voteService';

export async function GET(
  _req: NextRequest,
  context: { params: Promise<{ roomId: string }> }     // üëà v15: params ‡πÄ‡∏õ‡πá‡∏ô Promise
) {
  const { roomId } = await context.params;             // üëà ‡∏ï‡πâ‡∏≠‡∏á await

  const room = await prisma.room.findUnique({ where: { id: roomId } });
  if (!room) {
    return NextResponse.json({ error: 'ROOM_NOT_FOUND' }, { status: 404 });
  }

  const [scores, totalVotes] = await Promise.all([
    tallyVotesByRoom(roomId),
    prisma.vote.count({ where: { roomId } }),
  ]);

  return NextResponse.json({
    roomId,
    generatedAt: new Date().toISOString(),
    stats: { totalVotes, totalRestaurants: scores.length },
    scores,
  });
}
