import { prisma } from "@/lib/db"; // ‡∏õ‡∏£‡∏±‡∏ö path ‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏á‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Å‡∏ï‡πå‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì

export type VoteTallyRow = {
  restaurantId: string;
  accept: number;
  reject: number;
  approval: number; // 0..1
  netScore: number; // accept - reject
};

export async function tallyVotesByRoom(roomId: string): Promise<VoteTallyRow[]> {
  // ‡∏ñ‡πâ‡∏≤ schema ‡πÉ‡∏´‡∏°‡πà: restaurantId ‡πÄ‡∏õ‡πá‡∏ô string (‡πÑ‡∏°‡πà null) + ‡∏°‡∏µ value ‡πÅ‡∏ô‡πà‡∏ô‡∏≠‡∏ô
  const votes = await prisma.vote.findMany({
    where: { roomId },
    select: { restaurantId: true, value: true },
  });
  // üëâ ‡∏´‡∏≤‡∏Å‡∏Ñ‡∏∏‡∏ì‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà reset DB ‡πÅ‡∏•‡∏∞ restaurantId ‡∏¢‡∏±‡∏á‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÄ‡∏õ‡πá‡∏ô null ‡∏≠‡∏¢‡∏π‡πà
  // ‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡∏¥‡∏î‡∏Ñ‡∏≠‡∏°‡πÄ‡∏°‡∏ô‡∏ï‡πå‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡∏•‡πà‡∏≤‡∏á‡πÅ‡∏ó‡∏ô:
  // const votes = await prisma.vote.findMany({
  //   where: { roomId, restaurantId: { not: null } },
  //   select: { restaurantId: true, value: true },
  // });

  const map = new Map<string, { accept: number; reject: number }>();

  for (const v of votes) {
    const key = v.restaurantId; // ‡πÄ‡∏õ‡πá‡∏ô string ‡πÅ‡∏ô‡πà‡∏ô‡∏≠‡∏ô‡∏ñ‡πâ‡∏≤ schema ‡πÉ‡∏´‡∏°‡πà
    if (!map.has(key)) map.set(key, { accept: 0, reject: 0 });
    const agg = map.get(key)!;
    if (v.value === "ACCEPT") agg.accept += 1;
    else agg.reject += 1;
  }

  const rows: VoteTallyRow[] = [];
  for (const [restaurantId, { accept, reject }] of map.entries()) {
    const total = accept + reject;
    rows.push({
      restaurantId,
      accept,
      reject,
      approval: total > 0 ? accept / total : 0,
      netScore: accept - reject,
    });
  }

  // ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏•‡∏≥‡∏î‡∏±‡∏ö: netScore > approval > accept
  rows.sort(
    (a, b) =>
      b.netScore - a.netScore ||
      b.approval - a.approval ||
      b.accept - a.accept
  );

  return rows;
}
